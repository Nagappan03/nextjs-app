{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nagappan/React Projects/Udemy/Meetups - React Next JS/pages/[meetupId]/index.js\";\nimport { ObjectId } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://mernapp:q2HFO8degzxHGdL2@cluster0.ef3u1ti.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://mernapp:q2HFO8degzxHGdL2@cluster0.ef3u1ti.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/nagappan/React Projects/Udemy/Meetups - React Next JS/pages/[meetupId]/index.js"],"names":["ObjectId","MongoClient","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBAAO,QAAC,aAAD;AACH,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADrB;AAEH,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFrB;AAGH,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAHvB;AAIH,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ3B;AAAA;AAAA;AAAA;AAAA,UAAP;AAMH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,kGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC5BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADoB,KAAb,CAAZ;AAFJ,GAAP;AAMH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,kGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AAAf,GAA1B,CAA7B;AAEA,SAAO;AACHtB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACR2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADI;AAERrB,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAFd;AAGRC,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAHd;AAIRC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAJhB;AAKRC,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALpB;AADT;AADJ,GAAP;AAWH;AAED,eAAeN,aAAf","sourcesContent":["import { ObjectId } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\n\nfunction MeetupDetails(props) {\n    return <MeetupDetails\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n    />\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect('mongodb+srv://mernapp:q2HFO8degzxHGdL2@cluster0.ef3u1ti.mongodb.net/?retryWrites=true&w=majority');\n    const db = client.db();\n    const meetupsCollection = db.collection('meetups');\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n    client.close();\n    return {\n        fallback: false,\n        paths: meetups.map((meetup) => ({\n            params: { meetupId: meetup._id.toString() }\n        }))\n    }\n}\n\nexport async function getStaticProps(context) {\n    const meetupId = context.params.meetupId;\n    const client = await MongoClient.connect('mongodb+srv://mernapp:q2HFO8degzxHGdL2@cluster0.ef3u1ti.mongodb.net/?retryWrites=true&w=majority');\n    const db = client.db();\n    const meetupsCollection = db.collection('meetups');\n    const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\n\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                image: selectedMeetup.image,\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                description: selectedMeetup.description\n            }\n        }\n    }\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}